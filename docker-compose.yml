version: '3.8'

services:
  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - app_network

  timescaledb:
    image: timescale/timescaledb:latest-pg14
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - timescaledb_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app_network

  message_processor:
    build:
      context: .
      dockerfile: message_processor/Dockerfile
    env_file:
      - .env
    depends_on:
      redis:
        condition: service_healthy
      timescaledb:
        condition: service_healthy
    networks:
      - app_network

  websocket_collector:
    build:
      context: .
      dockerfile: websocket_collector/Dockerfile
    env_file:
      - .env
    depends_on:
      redis:
        condition: service_healthy
      timescaledb:
        condition: service_healthy
    networks:
      - app_network

  markets_collector:
    build:
      context: .
      dockerfile: markets_collector/Dockerfile
    env_file:
      - .env
    depends_on:
      timescaledb:
        condition: service_healthy
    networks:
      - app_network

  market_simulator:
    build:
      context: .
      dockerfile: market_simulator/Dockerfile
    env_file:
      - .env
    depends_on:
      timescaledb:
        condition: service_healthy
    networks:
      - app_network

volumes:
  timescaledb_data: 

networks:
  app_network:
    driver: bridge